/*
Script generated by Aqua Data Studio 8.0.9 on Apr-03-2011 08:31:58 AM
Database: southstardb
Schema: dbo
Objects: DATATYPE, DEFAULT, RULE, TABLE, VIEW, SYNONYM, PROCEDURE, FUNCTION, INDEX, TRIGGER
*/
ALTER TABLE "dbo"."REL_USER_ENTITY"
	DROP CONSTRAINT "FK_REL_USER_ENTITY_USERS"
GO
ALTER TABLE "dbo"."REL_USER_ENTITY"
	DROP CONSTRAINT "FK_REL_USER_ENTITY_ENTITY"
GO
ALTER TABLE "dbo"."DOCUMENTS"
	DROP CONSTRAINT "FK_DOCUMENTS_DOCUMENTS"
GO
DROP FUNCTION "dbo"."GetUserPermissions"
GO
DROP FUNCTION "dbo"."GetUserIdsFromEntity"
GO
DROP PROCEDURE "dbo"."UserLogin"
GO
DROP PROCEDURE "dbo"."UpsertUserPassword"
GO
DROP PROCEDURE "dbo"."UpsertUserAddress"
GO
DROP PROCEDURE "dbo"."UpsertUser"
GO
DROP PROCEDURE "dbo"."UpsertEntityAddress"
GO
DROP PROCEDURE "dbo"."UpsertEntity"
GO
DROP PROCEDURE "dbo"."SelectUserById"
GO
DROP PROCEDURE "dbo"."SelectEntityById"
GO
DROP PROCEDURE "dbo"."SelectByRecordId"
GO
DROP PROCEDURE "dbo"."GetUsersFromEntities"
GO
DROP PROCEDURE "dbo"."GetUsersCount"
GO
DROP PROCEDURE "dbo"."GetUsers"
GO
DROP PROCEDURE "dbo"."GetEntitiesByUserId"
GO
DROP PROCEDURE "dbo"."GetEntities"
GO
DROP PROCEDURE "dbo"."GetDocuments"
GO
DROP PROCEDURE "dbo"."DownloadDocumentById"
GO
DROP PROCEDURE "dbo"."DeleteUserById"
GO
DROP PROCEDURE "dbo"."DeleteEntityById"
GO
DROP PROCEDURE "dbo"."DeleteDocumentById"
GO
DROP TABLE "dbo"."USERS"
GO
DROP TABLE "dbo"."REL_USER_PERMISSION"
GO
DROP TABLE "dbo"."REL_USER_ENTITY"
GO
DROP TABLE "dbo"."PERMISSION"
GO
DROP TABLE "dbo"."LU_USER_TYPE"
GO
DROP TABLE "dbo"."LU_STATE"
GO
DROP TABLE "dbo"."ENTITY"
GO
DROP TABLE "dbo"."DOCUMENTS"
GO
DROP TABLE "dbo"."ADDRESS"
GO

CREATE TABLE "dbo"."ADDRESS"  ( 
	"ID"               	int IDENTITY(1,1) NOT NULL,
	"STREET_ADDRESS_1" 	varchar(250) NULL,
	"STREET_ADDRESS_2" 	varchar(50) NULL,
	"CITY"             	varchar(50) NULL,
	"STATE_ID"         	int NULL,
	"ZIP"              	varchar(5) NULL,
	"HOME_PHONE"       	varchar(15) NULL,
	"WORK_PHONE"       	varchar(15) NULL,
	"CELL_PHONE"       	varchar(15) NULL,
	"FAX_PHONE"        	varchar(15) NULL,
	"OTHER_PHONE"      	varchar(15) NULL,
	"ACTIVE_FLAG"      	char(1) NULL,
	"CREATED_TIMESTAMP"	datetime NULL,
	"UPDATED_TIMESTAMP"	datetime NULL,
	CONSTRAINT "PK_ADDRESS" PRIMARY KEY("ID")
)
GO
CREATE TABLE "dbo"."DOCUMENTS"  ( 
	"ID"               	int IDENTITY(1,1) NOT NULL,
	"ENTITY_ID"        	int NULL,
	"UPLOADED_DOCUMENT"	varbinary(max) NULL,
	"FILENAME"         	varchar(50) NULL,
	"ACTIVE_FLAG"      	char(1) NOT NULL,
	"CREATED_TIMESTAMP"	datetime NULL,
	"UPDATED_TIMESTAMP"	datetime NULL,
	CONSTRAINT "PK_DOCUMENTS" PRIMARY KEY("ID")
)
GO
CREATE TABLE "dbo"."ENTITY"  ( 
	"ID"               	int IDENTITY(1,1) NOT NULL,
	"ENTITY_NAME"      	varchar(250) NULL,
	"ENTITY_ADDRESS_ID"	int NULL,
	"ACTIVE_FLAG"      	char(1) NOT NULL,
	"CREATED_TIMESTAMP"	datetime NULL,
	"UPDATED_TIMESTAMP"	datetime NULL,
	CONSTRAINT "PK_ENTITY" PRIMARY KEY("ID")
)
GO
CREATE TABLE "dbo"."LU_STATE"  ( 
	"ID"         	int NOT NULL,
	"STATE_NAME" 	varchar(50) NULL,
	"ACTIVE_FLAG"	char(1) NOT NULL,
	CONSTRAINT "PK_STATE" PRIMARY KEY("ID")
)
GO
CREATE TABLE "dbo"."LU_USER_TYPE"  ( 
	"ID"         	int NOT NULL,
	"USER_TYPE"  	varchar(50) NULL,
	"ACTIVE_FLAG"	char(1) NULL 
	)
GO
CREATE TABLE "dbo"."PERMISSION"  ( 
	"PERMISSION_ID"	int IDENTITY(1,1) NOT NULL,
	"DESCRIPTION"  	nvarchar(50) NOT NULL 
	)
GO
CREATE TABLE "dbo"."REL_USER_ENTITY"  ( 
	"ID"       	int IDENTITY(1,1) NOT NULL,
	"USER_ID"  	int NOT NULL,
	"ENTITY_ID"	int NOT NULL,
	CONSTRAINT "PK_REL_USER_ENTITY" PRIMARY KEY("ID")
)
GO
CREATE TABLE "dbo"."REL_USER_PERMISSION"  ( 
	"USER_PERMISSION_ID"	int IDENTITY(1,1) NOT NULL,
	"USER_ID"           	int NOT NULL,
	"PERMISSION_ID"     	int NOT NULL,
	CONSTRAINT "PK_REL_USER_PERMISSION" PRIMARY KEY("USER_PERMISSION_ID")
)
GO
CREATE TABLE "dbo"."USERS"  ( 
	"ID"               	int IDENTITY(1,1) NOT NULL,
	"FIRST_NAME"       	varchar(50) NULL,
	"MIDDLE_NAME"      	varchar(50) NULL,
	"LAST_NAME"        	varchar(50) NULL,
	"USER_ADDRESS_ID"  	int NULL,
	"EMAIL"            	varchar(50) NULL,
	"LOGIN"            	varchar(50) NULL,
	"PASSWORD"         	varchar(50) NULL,
	"HAS_PASSWORD"     	bit NULL,
	"ACTIVE_FLAG"      	bit NOT NULL,
	"CREATED_TIMESTAMP"	datetime NULL,
	"UPDATED_TIMESTAMP"	datetime NULL,
	"USER_TYPE_ID"     	int NULL,
	CONSTRAINT "Users_PrimaryKey" PRIMARY KEY("ID")
)
GO
CREATE PROCEDURE "dbo"."DeleteDocumentById"

@documentId int

AS 

DELETE FROM DOCUMENTS WHERE ID = @documentId


GO
CREATE PROCEDURE "dbo"."DeleteEntityById"

@entityId int

AS 

declare @string varchar(500)
set @string = dbo.GetUserIdsFromEntity(@entityId)

declare @pos int
declare @piece varchar(500)

if right(rtrim(@string),1) <> ','
 set @string = @string  + ','

set @pos =  patindex('%,%' , @string)
while @pos <> 0 
begin
 set @piece = left(@string, @pos - 1)
 
DELETE FROM [REL_USER_PERMISSION] WHERE [USER_ID] = cast(@piece as int)
UPDATE USERS SET USER_TYPE_ID = NULL WHERE [ID] = cast(@piece as int)

 set @string = stuff(@string, 1, @pos,'')
 set @pos =  patindex('%,%' , @string)
end


DELETE FROM [REL_USER_ENTITY] WHERE ENTITY_ID = @entityId
DELETE FROM [DOCUMENTS] WHERE ENTITY_ID = @entityId
DELETE FROM [ADDRESS] WHERE ID = (SELECT ENTITY_ADDRESS_ID FROM ENTITY WHERE ID = @entityId)
DELETE FROM [ENTITY] WHERE ID = @entityId


GO
CREATE PROCEDURE "dbo"."DeleteUserById"

@userId int,
@entityId int

AS 

DELETE FROM [REL_USER_PERMISSION] WHERE [USER_ID] = @userId
DELETE FROM [REL_USER_ENTITY] WHERE [USER_ID] = @userId AND ENTITY_ID = @entityId
DELETE FROM [ADDRESS] WHERE ID = (SELECT USER_ADDRESS_ID FROM USERS WHERE ID = @userId)
DELETE FROM [USERS] WHERE ID = @userId


GO
CREATE PROCEDURE "dbo"."DownloadDocumentById"

@documentId int

AS 

SELECT [FILENAME], UPLOADED_DOCUMENT FROM DOCUMENTS WHERE ID=@documentId



GO
CREATE PROCEDURE "dbo"."GetDocuments"

@entityId int = 0

AS
    SET NOCOUNT ON;
    
    SELECT [ID], [FILENAME], [CREATED_TIMESTAMP], [UPDATED_TIMESTAMP] 
    FROM [DOCUMENTS]
    WHERE [ENTITY_ID] = @entityId;


GO
CREATE PROCEDURE "dbo"."GetEntities"

AS
    SET NOCOUNT ON;
    
SELECT [ID]
      ,[ENTITY_NAME]
      ,(SELECT STREET_ADDRESS_1 + ' ' + STREET_ADDRESS_2 + ' ' + CITY + ', ' + 
      CASE STATE_ID
         WHEN 1 THEN 'Maryland'
         WHEN 2 THEN 'Virginia'
         WHEN 3 THEN 'Washington DC'
         ELSE ' '
      END

      FROM [dbo].[ADDRESS] 
      WHERE ID = [ENTITY_ADDRESS_ID]) AS ENTITY_ADDRESS_ID
  FROM [southstardb].[dbo].[ENTITY]


GO
CREATE PROCEDURE "dbo"."GetEntitiesByUserId"

@userId int = 0

AS
    
SELECT E.ID
      ,[ENTITY_NAME]
      ,(SELECT STREET_ADDRESS_1 + ' ' + STREET_ADDRESS_2 + ' ' + CITY + ', ' + 
      CASE STATE_ID
         WHEN 1 THEN 'Maryland'
         WHEN 2 THEN 'Virginia'
         WHEN 3 THEN 'Washington DC'
         ELSE ' '
      END

      FROM [dbo].[ADDRESS] A
      WHERE A.ID = [ENTITY_ADDRESS_ID]) AS ENTITY_ADDRESS_ID
  FROM ENTITY E, REL_USER_ENTITY R
  WHERE R.ENTITY_ID = E.ID AND R.[USER_ID] = @userId


GO
CREATE PROCEDURE "dbo"."GetUsers"
(
	@sortExpression		nvarchar(50),
	@startRowIndex		int,
	@maximumRows		int
)
AS
    SET NOCOUNT ON;

	-- Since @startRowIndex is zero-based in the data Web control, but one-based w/ROW_NUMBER(), increment
	SET @startRowIndex = @startRowIndex + 1

	-- Issue query
	DECLARE @sql nvarchar(4000)
	SET @sql = 'WITH PagingCTE AS (SELECT [ID],[FIRST_NAME],[MIDDLE_NAME],[LAST_NAME],[LOGIN],[PASSWORD],[HAS_PASSWORD], ROW_NUMBER() OVER(ORDER BY ' + @sortExpression + ') 
	as RowNum FROM dbo.USERS WHERE USER_TYPE_ID IS NOT NULL ) SELECT [ID],[FIRST_NAME],[MIDDLE_NAME],[LAST_NAME],[LOGIN],[PASSWORD],[HAS_PASSWORD] FROM PagingCTE
	WHERE RowNum BETWEEN ' + CONVERT(nvarchar(10), @startRowIndex) + ' AND (' + CONVERT(nvarchar(10), @startRowIndex) + ' + ' + CONVERT(nvarchar(10), @maximumRows) + ') - 1'
	
	-- Execute the SQL query
	EXEC sp_executesql @sql

GO
CREATE PROCEDURE "dbo"."GetUsersCount"
(
	@totalRecords		int output
)
AS

DECLARE @sqltemp nvarchar(500)

SET @sqltemp = 'SELECT @totalRecords = COUNT(*) FROM dbo.Users'

EXEC sp_executeSql @sqltemp , N'@totalRecords int output', @totalRecords output

GO
CREATE PROCEDURE "dbo"."GetUsersFromEntities"

@entityId int = 0

AS
    SET NOCOUNT ON;
    
  
SELECT U.ID, U.FIRST_NAME, U.MIDDLE_NAME, U.LAST_NAME, U.EMAIL, T.USER_TYPE
FROM USERS U, REL_USER_ENTITY R, ENTITY E,LU_USER_TYPE T 
WHERE U.ID = R.[USER_ID] 
AND E.ID = R.ENTITY_ID 
AND E.ID = @entityId
AND T.ID = U.USER_TYPE_ID


GO
CREATE PROCEDURE "dbo"."SelectByRecordId"
(
	@id			nvarchar(256),
	@table				nvarchar(500)
)
AS

DECLARE @sqltemp nvarchar(650)

SET @sqltemp = 'SELECT * FROM dbo.' + @table + ' WHERE  (RecordID = ''' + @id + ''')'

EXEC sp_executeSql @sqltemp


GO
CREATE PROCEDURE "dbo"."SelectEntityById"

@entityId int

AS 

SELECT 
(SELECT E.ENTITY_NAME FROM ENTITY E WHERE E.ID = @entityId) ENTITY_NAME,
(SELECT E.ENTITY_ADDRESS_ID FROM ENTITY E WHERE E.ID = @entityId) ENTITY_ADDRESS_ID,
A.STREET_ADDRESS_1,
A.STREET_ADDRESS_2,
A.CITY,
A.STATE_ID,
(SELECT 
CASE S.STATE_NAME WHEN ' ' THEN 0 END STATE_NAME
FROM LU_STATE S 
WHERE S.ID = (SELECT A.STATE_ID FROM ADDRESS A WHERE A.ID = (SELECT E.ENTITY_ADDRESS_ID FROM ENTITY E WHERE E.ID = @entityId))) STATE_NAME,
A.ZIP,
A.HOME_PHONE,
A.WORK_PHONE,
A.CELL_PHONE,
A.FAX_PHONE,
A.OTHER_PHONE
FROM ADDRESS A
WHERE A.ID = (SELECT E.ENTITY_ADDRESS_ID FROM ENTITY E WHERE E.ID = @entityId)


GO
CREATE PROCEDURE "dbo"."SelectUserById"

@userId int

AS 

SELECT 
(SELECT U.FIRST_NAME FROM USERS U WHERE U.ID = @userId) FIRST_NAME,
(SELECT U.MIDDLE_NAME FROM USERS U WHERE U.ID = @userId) MIDDLE_NAME,
(SELECT U.LAST_NAME FROM USERS U WHERE U.ID = @userId) LAST_NAME,
(SELECT U.USER_ADDRESS_ID FROM USERS U WHERE U.ID = @userId) USER_ADDRESS_ID,
(SELECT U.EMAIL FROM USERS U WHERE U.ID = @userId) EMAIL,
(SELECT U.[LOGIN] FROM USERS U WHERE U.ID = @userId) [LOGIN],
(SELECT U.[PASSWORD] FROM USERS U WHERE U.ID = @userId) [PASSWORD],
(SELECT U.HAS_PASSWORD FROM USERS U WHERE U.ID = @userId) HAS_PASSWORD,
A.HOME_PHONE,
A.CELL_PHONE,
A.OTHER_PHONE,
A.WORK_PHONE,
(SELECT U.USER_TYPE_ID FROM USERS U WHERE U.ID = @userId) USER_TYPE_ID
FROM ADDRESS A
WHERE A.ID = (SELECT U.USER_ADDRESS_ID FROM USERS U WHERE U.ID = @userId)

GO
CREATE PROCEDURE "dbo"."UpsertEntity"

@entityId int,
@val varchar,
@entityName varchar(250),
@entityAddressId int

AS 

IF @val = 'E'
BEGIN 
	UPDATE [dbo].[ENTITY] SET
	
		[ENTITY_NAME] = @entityName,
		[UPDATED_TIMESTAMP] = GETDATE()
		WHERE [ID] = @entityId
	
END 
ELSE 
BEGIN 
	INSERT [dbo].[ENTITY]
	(
		[ENTITY_NAME],
		[ENTITY_ADDRESS_ID],
		[ACTIVE_FLAG],
		[CREATED_TIMESTAMP],
		[UPDATED_TIMESTAMP]
	)
	VALUES
	(
		@entityName,
		@entityAddressId,
		1,
		GETDATE(),
		GETDATE()
	)
END 






GO
CREATE PROCEDURE "dbo"."UpsertEntityAddress"

@entityAddressId int,
@val varchar (4),
@streetAddress1 varchar(250),
@streetAddress2 varChar(50),
@city varChar(50),
@state int,
@zip varChar(5),
@workPhone varChar(15),
@faxPhone varChar(15),
@otherPhone varChar(15)

AS 

IF @val = 'E' 
BEGIN 
    UPDATE [dbo].[ADDRESS] SET
		[STREET_ADDRESS_1] = @streetAddress1,
		[STREET_ADDRESS_2] = @streetAddress2,
		[CITY] = @city,
		[STATE_ID] = @state,
		[ZIP] = @zip,
		[WORK_PHONE] = @workPhone,
		[FAX_PHONE] = @faxPhone,
		[OTHER_PHONE] = @otherPhone,
		[UPDATED_TIMESTAMP] = GETDATE()
WHERE [ID] = @entityAddressId		
		
END 
ELSE 
BEGIN 
	INSERT [dbo].[ADDRESS]
	(
		[STREET_ADDRESS_1],
		[STREET_ADDRESS_2],
		[CITY],
		[STATE_ID],
		[ZIP],
		[HOME_PHONE],
		[WORK_PHONE],
		[CELL_PHONE],
		[FAX_PHONE],
		[OTHER_PHONE],
		[ACTIVE_FLAG],
		[CREATED_TIMESTAMP],
		[UPDATED_TIMESTAMP]
	)
	VALUES
	(
		@streetAddress1,
		@streetAddress2,
		@city,
		@state,
		@zip,
		NULL,
		@workPhone,
		NULL,
		@faxPhone,
		@otherPhone,
		1,
		GETDATE(),
		GETDATE()
	)

	RETURN SCOPE_IDENTITY()
END 




GO
CREATE PROCEDURE "dbo"."UpsertUser"

@userId int,
@entityId int,
@val varchar,
@firstName varchar(50),
@middleName varchar(50),
@lastName varchar(50),
@userAddressId int,
@email varchar(50),
@userTypeId int

AS 

IF @val = 'E'
BEGIN 
	UPDATE [dbo].[USERS] SET
	
		[FIRST_NAME] = @firstName,
		[MIDDLE_NAME] = @middleName,
		[LAST_NAME] = @lastName,
		[USER_ADDRESS_ID] = @userAddressId,
		[EMAIL] = @email,
		[USER_TYPE_ID] = @userTypeId,
		[UPDATED_TIMESTAMP] = GETDATE()
		WHERE [ID] = @userId
		
	UPDATE [dbo].[REL_USER_PERMISSION] SET
		[PERMISSION_ID] = @userTypeId
		WHERE [USER_ID] = @userId
	
END 
ELSE 
BEGIN 
	INSERT [dbo].[USERS]
	(
		[FIRST_NAME],
		[MIDDLE_NAME],
		[LAST_NAME],
		[USER_ADDRESS_ID],
		[EMAIL],
		[LOGIN],
		[PASSWORD],
		[ACTIVE_FLAG],
		[CREATED_TIMESTAMP],
		[UPDATED_TIMESTAMP],
		[USER_TYPE_ID]
	)
	VALUES
	(
		@firstName,
		@middleName,
		@lastName,
		@userAddressId,
		@email,
		NULL,
		NULL,
		1,
		GETDATE(),
		GETDATE(),
		@userTypeId
	)
	
	
	INSERT INTO [dbo].[REL_USER_ENTITY] ([USER_ID],[ENTITY_ID]) VALUES (SCOPE_IDENTITY(), @entityId)
	INSERT INTO [dbo].[REL_USER_PERMISSION] ([USER_ID],[PERMISSION_ID]) VALUES (SCOPE_IDENTITY(), @userTypeId)
	
END 










GO
CREATE PROCEDURE "dbo"."UpsertUserAddress"

@userAddressId int,
@val varchar (4),
@homePhone varChar(15),
@cellPhone varChar(15),
@otherPhone varChar(15),
@workPhone varChar(15)

AS 

IF @val = 'E' 
BEGIN 
    UPDATE [dbo].[ADDRESS] SET
		[HOME_PHONE] = @homePhone,
		[CELL_PHONE] = @cellPhone,
		[OTHER_PHONE] = @otherPhone,
		[WORK_PHONE] = @workPhone,
		[UPDATED_TIMESTAMP] = GETDATE()
WHERE [ID] = @userAddressId		
		
END 
ELSE 
BEGIN 
	INSERT [dbo].[ADDRESS]
	(
		[STREET_ADDRESS_1],
		[STREET_ADDRESS_2],
		[CITY],
		[STATE_ID],
		[ZIP],
		[HOME_PHONE],
		[WORK_PHONE],
		[CELL_PHONE],
		[FAX_PHONE],
		[OTHER_PHONE],
		[ACTIVE_FLAG],
		[CREATED_TIMESTAMP],
		[UPDATED_TIMESTAMP]
	)
	VALUES
	(
		NULL,
		NULL,
		NULL,
		0,
		NULL,
		@homePhone,
		NULL,
		@cellPhone,
		@workPhone,
		@otherPhone,
		1,
		GETDATE(),
		GETDATE()
	)

	RETURN SCOPE_IDENTITY()
END 








GO
CREATE PROCEDURE "dbo"."UpsertUserPassword"

@userId int,
@login varchar(50),
@password varchar(50)

AS 

	UPDATE [dbo].[USERS] SET
	
		[LOGIN] = @login,
		[PASSWORD] = @password,
		[UPDATED_TIMESTAMP] = GETDATE()
		WHERE [ID] = @userId
GO
CREATE PROCEDURE "dbo"."UserLogin"
 (
    @username nvarchar(50) = NULL,
    @password nvarchar(50) = NULL
)
AS
  
         SELECT USERS.[ID],
                FIRST_NAME,
                LAST_NAME,
                dbo.GetUserPermissions(USERS.ID) as PERMISSION_LIST,
                [PASSWORD]
	   FROM USERS
           WHERE (LTRIM(RTRIM([LOGIN])) = @username)
              	AND (LTRIM(RTRIM([PASSWORD])) = @password)


GO
CREATE FUNCTION "dbo"."GetUserIdsFromEntity"
  (
    @entityId int
  )  
RETURNS varchar(100) AS  
BEGIN 

 declare @RowCnt int
 declare @MaxRows int
 declare @PermissionID int
 declare @String varchar(100)
 declare @Delimiter char(1)

 select @RowCnt = 1
 select @Delimiter = ','
 select @String = ''

 declare @MyUsers table
 (
    RECORD_ID int identity,
    [USER_ID] int
 )

 insert into @MyUsers
 select [USER_ID]
   from REL_USER_ENTITY
   Where [ENTITY_ID] = @entityId

 select @MaxRows=@@rowcount

 while @RowCnt  <= @MaxRows
 begin

   select @String = @String + 
                    case
                    when @RowCnt  < @MaxRows then ltrim(rtrim(cast([USER_ID] as varchar(20)))) + @Delimiter
                    when @RowCnt = @MaxRows then ltrim(rtrim(cast([USER_ID] as varchar(20))))
                    END
     from @MyUsers 
     where RECORD_ID = @RowCnt 
  
     select @RowCnt = @RowCnt + 1
  
 end
  
  return @String
END

GO
CREATE FUNCTION "dbo"."GetUserPermissions"
  (
    @UserID int
  )  
RETURNS varchar(100) AS  
BEGIN 

 declare @RowCnt int
 declare @MaxRows int
 declare @PermissionID int
 declare @String varchar(100)
 declare @Delimiter char(1)

 select @RowCnt = 1
 select @Delimiter = ','
 select @String = ''

 declare @MyPermission table
 (
    RECORD_ID int identity,
    PERMISSION_ID int
 )

 insert into @MyPermission
 select PERMISSION_ID
   from REL_USER_PERMISSION
   Where [USER_ID] = @UserID

 select @MaxRows=@@rowcount

 while @RowCnt  <= @MaxRows
 begin

   select @String = @String + 
                    case
                    when @RowCnt  < @MaxRows then ltrim(rtrim(cast(PERMISSION_ID as varchar(20)))) + @Delimiter
                    when @RowCnt = @MaxRows then ltrim(rtrim(cast(PERMISSION_ID as varchar(20))))
                    END
     from @MyPermission 
     where RECORD_ID = @RowCnt 
  
     select @RowCnt = @RowCnt + 1
  
 end
  
  return @String
END

GO

ALTER TABLE "dbo"."DOCUMENTS"
	ADD CONSTRAINT "FK_DOCUMENTS_DOCUMENTS"
	FOREIGN KEY("ID")
	REFERENCES "dbo"."DOCUMENTS"("ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
ALTER TABLE "dbo"."REL_USER_ENTITY"
	ADD CONSTRAINT "FK_REL_USER_ENTITY_USERS"
	FOREIGN KEY("USER_ID")
	REFERENCES "dbo"."USERS"("ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
ALTER TABLE "dbo"."REL_USER_ENTITY"
	ADD CONSTRAINT "FK_REL_USER_ENTITY_ENTITY"
	FOREIGN KEY("ENTITY_ID")
	REFERENCES "dbo"."ENTITY"("ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
